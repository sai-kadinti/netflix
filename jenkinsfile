pipeline 
{
    agent { label "main" }

    environment 
    {
        GIT_REPO_URL =  'https://github.com/sai-kadinti/netflix.git'
        GIT_BRANCH = 'master'
        DEV_SERVER_IP  = "3.83.66.78"
        JENKINS_SERVER_IP= "13.222.235.18"
        SONARQUBE_IPADDRESS = "http://3.83.66.78:9000/"
        SONARQUBE_TOKEN = "squ_ccb0d1ce68936479547512162c5d5f24ca606bea"
        DOCKERHUB_USER = 'kadintisai'
        DOCKERHUB_PASS = credentials('docker_pwd')
        HOST_PORT = '9999'
        SKIP_STAGE = 'true'
    }
    options 
    {
        skipStagesAfterUnstable()
        timestamps()
    }

    stages {
        stage('Download source code') 
        {
            steps 
            {
                git branch: "${GIT_BRANCH}" , url: "${GIT_REPO_URL}"
                sh 'echo "PWD: $(pwd)" && ls -lrth'
            }
        }

        stage('SonarQube Scan') 
        {
            when
            {
                expression { return env.SKIP_STAGE = 'true' }
            }
            environment 
            {
                SONAR_SCANNER_HOME = '/opt/sonar-scanner/bin'
            }
            steps 
            {
                echo "use != in when block to skip this step if need"
                sh '''
                    ${SONAR_SCANNER_HOME}/sonar-scanner \
                      -Dsonar.projectKey=web-ui-project \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=${SONARQUBE_IPADDRESS} \
                      -Dsonar.token=${SONARQUBE_TOKEN} \
                      -Dsonar.sourceEncoding=UTF-8 \
                      -Dsonar.exclusions=**/node_modules/**,**/*.min.js
                '''
            }
        }
        stage ("Installing dependencies")
        {
            steps 
            {
                dir("${env.WORKSPACE}")
                {
                    sh "npm install"
                }
            }
        }
        stage ("Building Artifats")
        {
            steps
            {
                sh '''export NVM_DIR="$HOME/.nvm"
                if [ ! -d "$NVM_DIR" ]; then
                    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
                fi
                . "$NVM_DIR/nvm.sh"
                nvm install 16
                nvm use 16
                node -v
                npm run build
            '''
            }
        }
        stage ("Deploy in QA")
        {
            steps
            {
                echo "üöÄ Deploying build to QA server"
                sh '''
                    ssh root@${JENKINS_SERVER_IP} "rm -rf /var/www/html/*"
                    scp -r build/* root@${JENKINS_SERVER_IP}:/var/www/html/
                    ssh root@${JENKINS_SERVER_IP} "systemctl restart nginx"
                '''
                echo "Access it via: http://${JENKINS_SERVER_IP}/"
            }
        }
        stage ('Create Docker image')
        {
            steps
            {
                sh "docker build -t ${DOCKERHUB_USER}/${JOB_NAME}:${BUILD_NUMBER} ."
            }
        }
        stage ("Docker login")
        {
            steps 
            {

                sh 'docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS'
                sh 'echo "Docker login succeed"'
            }
        }
        stage ("Push the image to DockerHub")
        {
            steps 
            {
                sh "docker push ${DOCKERHUB_USER}/${JOB_NAME}:${BUILD_NUMBER}"
            }
        }
        stage ("Run the container")
        {
            steps
            {
                sh 'docker run --name ${JOB_NAME}_${BUILD_NUMBER} -p ${HOST_PORT}:80 -d ${DOCKERHUB_USER}/${JOB_NAME}:${BUILD_NUMBER}'
            }
        }
        stage ('Access the service')
        {
            steps
            {
                echo "üìç QA Server: http://${JENKINS_SERVER_IP}/"
                echo "üìç PROD Server: http://${DEV_SERVER_IP}:${HOST_PORT}/"
            }
        }
    }
    post
    {
        always
        {
            echo '‚úÖ Pipeline execution completed.'
        }
        failure
        {
            echo '‚ùå Pipeline failed! Please check logs for details.'
        }
    }
}
